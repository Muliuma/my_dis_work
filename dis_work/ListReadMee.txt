1、文件夹介绍：
annotations:DSL特征化命令、并行性研究和相关注释。更具体地说，（i）轻量级注释语言允许命令开发人员表达关于他们的命令的关键并行性属性；（ii）POSIX和GNU命令的并行性研究。指导注释语言和优化的聚合器库

compiler: Shell数据流转换和相关的并行化转换。给定一个脚本，PaSh编译器将其转换为数据流图，执行一系列暴露并行性的保留语义的程序转换，然后将数据流图转换回POSIX脚本。

runtime:运行时组件，如热切、拆分和关联的组合器。除了添加POSIX构造来明确指导并行性之外，PaSh还提供了Unix感知的运行时原语，用于解决与性能和正确性相关的问题。

docs:设计文档、教程、安装说明等。

scripts:与持续集成、部署和测试相关的脚本。

evaluation: 用于评估的Shell管道和示例脚本。

2、重点脚本介绍：
	看compiler。它的入口点是pash.py，它解析脚本并用对pash_runtime.sh的调用替换潜在的可并行区域。然后它执行脚本。这允许在运行时调用编译器以获得有关环境变量值的信息。
pash_runtime.sh脚本只是调用pash.py编译器：如果成功，它将执行优化的脚本，否则它将执行原始脚本。
编译器有几个阶段：
	它扩展AST中的单词，然后将其转换为我们的数据流模型（由注释引导）
	扩展和翻译发生在ast_to_ir.py中
	数据流模型主要在ir.py中定义
	注释在binpash/annotations中处理
	它对数据流图执行转换以公开并行性（由注释引导）
	翻译发生在pash_compiler.py中
	然后，它将数据流图转换回shell脚本，以使用bash执行它
	dfg2shell转换发生

3、开发工作：
	基于原本代码实现的函数基础上完成相关实验的验证，主要验证代码存储于evaluation\tests中。
	
	在本文件夹中我们实现了相关的比较实验文件，通过两种方式运行一个文件，通过他们完成
	该文件的时间去对比，得到我们改进方式的优点，在实验中可以明显的看出基于PASH执行
	的文件速度远远快于正常的bash执行文件，从而验证了论文的结论。（实验条件和原文一致
	，使用64个cpu进行并行化运算，从而实现效果，降低cpu数量可能导致效果不行，建议使
	用相同的cpu数量）

